name: GTmetrix Performance Test

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Send Success Email via n8n (SonarQube Scan Completed)
        if: success()
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL_SONAR }}
        run: |
          curl -X POST $Env:N8N_WEBHOOK_URL `
            -H "Content-Type: application/json" `
            -d '{"body": "The SonarQube scan has been completed successfully for the latest commit. Please review the results."}'

      - name: Send Failure Email via n8n (SonarQube Scan Failed)
        if: failure()
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
        run: |
          curl -X POST $Env:N8N_WEBHOOK_URL `
            -H "Content-Type: application/json" `
            -d '{"body": "The SonarQube scan has failed for the latest commit. Please review the errors and try again."}'

  gtmetrix-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run GTmetrix Test
        env:
          GTMETRIX_API_KEY: ${{ secrets.GTMETRIX_API_KEY }}
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL_GTM }}
        run: |
          # Step 1: Trigger GTmetrix Test
          curl -X POST https://gtmetrix.com/api/2.0/tests \
            -H "Authorization: Basic $(echo -n ${GTMETRIX_API_KEY}: | base64)" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{"data": {"type": "test", "attributes": {"url": "https://www.google.com/"}}}' \
            -o gtmetrix-response.json
          echo "Raw GTmetrix Response (Initial Test Submission):"
          cat gtmetrix-response.json
          SELF_LINK=$(jq -r '.links.self' gtmetrix-response.json)
          echo "Self Link: $SELF_LINK"
          if [ -z "$SELF_LINK" ] || [ "$SELF_LINK" == "null" ]; then
            echo "Failed to retrieve the self link for the GTmetrix test"
            exit 1
          fi

          # Step 2: Initiate the test
          MAX_RETRIES=20
          RETRY_DELAY=40
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Polling GTmetrix test status... Attempt $i of $MAX_RETRIES"
            curl -X GET "$SELF_LINK" \
              -H "Authorization: Basic $(echo -n ${GTMETRIX_API_KEY}: | base64)" \
              -o gtmetrix-detailed-response.json
            echo "Raw GTmetrix Response (Polling Step $i):"
            cat gtmetrix-detailed-response.json
            STATE=$(jq -r '.data.attributes.state' gtmetrix-detailed-response.json)
            echo "Test State: $STATE"
            if [ "$STATE" == "completed" ]; then
              echo "GTmetrix Test Completed!"
              break
            elif [ "$i" -eq "$MAX_RETRIES" ]; then
              echo "GTmetrix test did not complete within the timeout period."
              exit 1
            fi
            sleep $RETRY_DELAY
          done

          # Step 3: Fetch Detailed Report
          REPORT_LINK=$(jq -r '.data.links.report' gtmetrix-detailed-response.json)
          echo "Report Link: $REPORT_LINK"
          if [ -z "$REPORT_LINK" ] || [ "$REPORT_LINK" == "null" ]; then
            echo "Failed to retrieve the report link"
            exit 1
          fi
          curl -X GET "$REPORT_LINK" \
            -H "Authorization: Basic $(echo -n ${GTMETRIX_API_KEY}: | base64)" \
            -o gtmetrix-report-details.json
          echo "Detailed Report Response:"
          cat gtmetrix-report-details.json
          
          # Step 4: Fetch Report PDF
          REPORT_PDF=$(jq -r '.data.links.report_pdf' gtmetrix-report-details.json)
          echo "Report PDF Link: $REPORT_PDF"
          if [ -z "$REPORT_PDF" ] || [ "$REPORT_PDF" == "null" ]; then
            echo "Failed to retrieve the GTmetrix report PDF link"
            exit 1
          fi

          # Step 5: Send Report PDF Link to n8n
          echo "Sending the following data to n8n: {\"report_pdf\": \"$REPORT_PDF\"}"
          curl -X POST "$N8N_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d '{"report_pdf": "'"$REPORT_PDF"'"}'
          echo "GTmetrix Report PDF Link sent to n8n!"